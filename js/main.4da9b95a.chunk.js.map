{"version":3,"sources":["components/QuizPage.js","components/ResultPage.js","components/CreateQuiz.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["QuizPage","questions","question","answers","currentQuestion","checked","correct","userAnswer","maxQuestionCount","checkAnswer","nextQuestion","disabled","restartQuiz","Fragment","ProgressBar","now","max","className","Container","ListGroup","map","answer","index","classes","correct_answer","Item","key","action","onClick","Button","variant","ResultPage","score","resetQuiz","CreateQuiz","state","number","category","difficulty","this","type","min","value","onChange","event","setState","target","props","loadQuestions","Component","Loading","style","height","Row","Spinner","animation","width","borderWidth","App","loading","playQuiz","url","fetch","then","data","json","results","length","setQuestion","quizItem","incorrect_answers","sort","Math","random","quizEnd","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4da9b95a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Container, Button, ListGroup, ProgressBar } from 'react-bootstrap';\r\n\r\nexport default function QuizPage({ questions,\r\n    question,\r\n    answers,\r\n    currentQuestion,\r\n    checked,\r\n    correct,\r\n    userAnswer,\r\n    maxQuestionCount,\r\n    checkAnswer,\r\n    nextQuestion,\r\n    disabled,\r\n    restartQuiz }) {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ProgressBar now={currentQuestion} max={maxQuestionCount} className=\"mb-4 rounded-0\" />\r\n            <Container>\r\n\r\n                <h5 className=\"mb-4\">{question}</h5>\r\n\r\n                <ListGroup>\r\n\r\n                    {answers.map((answer, index) => {\r\n\r\n                        let classes = '';\r\n\r\n                        if (checked) {\r\n\r\n                            if (answer === userAnswer && correct) {\r\n                                classes = \"correctAnswer\"\r\n                            } else if (answer === userAnswer && !correct) {\r\n                                classes = \"wrongAnswer\"\r\n                            }\r\n\r\n                            if (answer === questions[currentQuestion].correct_answer) classes = \"correctAnswer\"\r\n\r\n                        }\r\n\r\n                        return <ListGroup.Item\r\n                            key={index}\r\n                            action={!checked}\r\n                            onClick={() => checkAnswer(answer)}\r\n                            className={classes}>\r\n\r\n                            {answer}\r\n                        </ListGroup.Item>\r\n\r\n                    })}\r\n\r\n                </ListGroup>\r\n\r\n\r\n\r\n                <Button\r\n                    variant=\"outline-success\"\r\n                    className=\"mt-4\"\r\n                    disabled={disabled ? true : false}\r\n                    onClick={nextQuestion}>Next</Button>\r\n                <Button\r\n                    variant=\"outline-primary\"\r\n                    className=\"mt-4 float-right\"\r\n                    onClick={restartQuiz}>Restart</Button>\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default function ResultPage({\r\n    score,\r\n    maxQuestionCount,\r\n    resetQuiz,\r\n    restartQuiz\r\n}) {\r\n    return (\r\n        <div className=\"text-center mt-5\">\r\n            <div className=\"mb-4\"><span className=\"h5\">Your Score : </span><span className=\"h5 font-weight-bold\">{score}/</span><span className=\"text-small\">{maxQuestionCount}</span></div>\r\n\r\n            <Button variant=\"outline-success m-2\" onClick={resetQuiz}>Reset</Button>\r\n            <Button variant=\"outline-primary m-2\" onClick={restartQuiz}>Restart</Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Container, Button } from 'react-bootstrap';\r\n\r\nexport default class CreateQuiz extends Component {\r\n\r\n    state = {\r\n        number: 5,\r\n        category: \"any\",\r\n        difficulty: \"any\",\r\n    }\r\n\r\n    render() {\r\n        const { number, category, difficulty } = this.state;\r\n\r\n        return (\r\n            <Container>\r\n\r\n                <div className=\"form-group mt-4 mb-4\">\r\n                    <label>Difficulty</label>\r\n                    <input type=\"number\" className=\"form-control\" min=\"1\" max=\"50\" value={number} onChange={(event) => this.setState({ number: event.target.value })} />\r\n                </div>\r\n\r\n                <div className=\"form-group mb-4\">\r\n                    <label>Category</label>\r\n                    <select className=\"form-control\" value={category} onChange={(event) => this.setState({ category: event.target.value })}>\r\n                        <option value=\"any\">Any Category</option>\r\n                        <option value=\"9\">General Knowledge</option>\r\n                        <option value=\"10\">Entertainment: Books</option>\r\n                        <option value=\"11\">Entertainment: Film</option>\r\n                        <option value=\"12\">Entertainment: Music</option>\r\n                        <option value=\"13\">Entertainment: Musicals - Theatres</option>\r\n                        <option value=\"14\">Entertainment: Television</option>\r\n                        <option value=\"15\">Entertainment: Video Games</option>\r\n                        <option value=\"16\">Entertainment: Board Games</option>\r\n                        <option value=\"17\">Science - Nature</option>\r\n                        <option value=\"18\">Science: Computers</option>\r\n                        <option value=\"19\">Science: Mathematics</option>\r\n                        <option value=\"20\">Mythology</option>\r\n                        <option value=\"21\">Sports</option>\r\n                        <option value=\"22\">Geography</option>\r\n                        <option value=\"23\">History</option>\r\n                        <option value=\"24\">Politics</option>\r\n                        <option value=\"25\">Art</option>\r\n                        <option value=\"26\">Celebrities</option>\r\n                        <option value=\"27\">Animals</option>\r\n                        <option value=\"28\">Vehicles</option>\r\n                        <option value=\"29\">Entertainment: Comics</option>\r\n                        <option value=\"30\">Science: Gadgets</option>\r\n                        <option value=\"31\">Entertainment: Japanese Anime - Manga</option>\r\n                        <option value=\"32\">Entertainment: Cartoon - Animations</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-4\">\r\n                    <label>Difficulty</label>\r\n                    <select className=\"form-control\" value={difficulty} onChange={(event) => this.setState({ difficulty: event.target.value })}>\r\n                        <option value=\"any\">Any Difficulty</option>\r\n                        <option value=\"easy\">Easy</option>\r\n                        <option value=\"medium\">Medium</option>\r\n                        <option value=\"hard\">Hard</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-4\">\r\n                    <Button variant=\"outline-success\"\r\n                        onClick={() => this.props.loadQuestions(number, category, difficulty)}\r\n                    >Start Quiz</Button>\r\n                </div>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Row, Container, Spinner } from 'react-bootstrap';\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <div style={{\r\n            height: '100vh'\r\n        }}>\r\n\r\n            <Container className=\"h-100\">\r\n                <Row className=\"h-100 align-items-center\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <Spinner animation=\"border\" variant=\"primary\" style={{\r\n                            width: '5rem',\r\n                            height: '5rem',\r\n                            borderWidth: '0.50rem'\r\n                        }} />\r\n                    </div>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport QuizPage from './components/QuizPage'\nimport ResultPage from './components/ResultPage';\nimport CreateQuiz from './components/CreateQuiz';\nimport Loading from './components/Loading';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuestion: \"\",\n      score: 0,\n      disabled: true,\n      checked: false,\n      userAnswer: null,\n      correct: null,\n      quizEnd: false,\n      loading: true,\n      playQuiz: false,\n    };\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.currentQuestion !== this.state.currentQuestion) {\n      this.setQuestion();\n    }\n  }\n\n  loadQuestions = (number = 5, category = \"any\", difficulty = \"any\") => {\n\n    this.setState({\n      loading: true,\n      playQuiz: true\n    })\n\n    let url = `https://opentdb.com/api.php?amount=${number}&type=multiple`;\n\n    if (category !== \"any\") url += `&category=${category}`;\n\n    if (difficulty !== \"any\") url += `&difficulty=${difficulty}`;\n\n    fetch(url)\n      .then(data => data.json())\n      .then(data => {\n\n        let questions = data.results\n\n        this.setState({\n          questions: questions,\n          maxQuestionCount: questions.length,\n          currentQuestion: 0\n        })\n      })\n\n  }\n\n  setQuestion = () => {\n    let quizItem = this.state.questions[this.state.currentQuestion];\n\n    let answers = [...quizItem.incorrect_answers, quizItem.correct_answer];\n\n    answers.sort(() => Math.random() - 0.5);\n\n    this.setState(\n      {\n        question: quizItem.question,\n        answers: answers,\n        checked: false,\n        loading: false,\n        playQuiz: true\n      }\n    )\n  }\n\n\n  checkAnswer = (userAnswer) => {\n\n    if (this.state.disabled) {\n      if (userAnswer === this.state.questions[this.state.currentQuestion].correct_answer) {\n\n        this.setState({ score: this.state.score + 1, disabled: false, checked: true, userAnswer: userAnswer, correct: true })\n\n      } else {\n\n        this.setState({ disabled: false, checked: true, correct: false, userAnswer: userAnswer })\n      }\n    }\n\n  }\n\n  nextQuestion = () => {\n\n    if (this.state.currentQuestion < this.state.questions.length - 1) {\n      this.setState({\n        currentQuestion: this.state.currentQuestion + 1,\n        disabled: true,\n        userAnswer: null,\n        correct: null\n      })\n    } else {\n      this.setState({\n        disabled: true,\n        userAnswer: null,\n        correct: null,\n        quizEnd: true\n      })\n    }\n\n  }\n\n  resetQuiz = () => {\n    this.setState({\n      currentQuestion: 0,\n      score: 0,\n      disabled: true,\n      checked: false,\n      userAnswer: null,\n      correct: null,\n      quizEnd: false\n    })\n  }\n\n  restartQuiz = () => {\n    this.setState({\n      score: 0,\n      disabled: true,\n      checked: false,\n      userAnswer: null,\n      correct: null,\n      quizEnd: false,\n      loading: true,\n      playQuiz: false,\n    })\n  }\n\n\n  render() {\n\n    const { questions, question, answers, quizEnd, currentQuestion, score, maxQuestionCount, checked, correct, userAnswer, loading, disabled, playQuiz } = this.state;\n\n\n\n    if (playQuiz) {\n\n      if (!loading) {\n\n        return (\n          <React.Fragment>\n\n            {\n              !quizEnd ?\n                <QuizPage\n                  questions={questions}\n                  question={question}\n                  answers={answers}\n                  currentQuestion={currentQuestion}\n                  checked={checked}\n                  correct={correct}\n                  userAnswer={userAnswer}\n                  maxQuestionCount={maxQuestionCount}\n                  checkAnswer={this.checkAnswer}\n                  nextQuestion={this.nextQuestion}\n                  disabled={disabled}\n                  restartQuiz={this.restartQuiz}\n                /> :\n\n                <ResultPage\n                  score={score}\n                  maxQuestionCount={maxQuestionCount}\n                  resetQuiz={this.resetQuiz}\n                  restartQuiz={this.restartQuiz}\n                />\n\n            }\n          </React.Fragment>\n        )\n\n      } else {\n        return <Loading />\n      }\n\n    }\n\n    return <CreateQuiz loadQuestions={this.loadQuestions} />\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}